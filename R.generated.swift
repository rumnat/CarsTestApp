//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Info-tvOS.plist`.
    static let infoTvOSPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Info-tvOS", pathExtension: "plist")
    
    /// `bundle.url(forResource: "Info-tvOS", withExtension: "plist")`
    static func infoTvOSPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.infoTvOSPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 4 images.
  struct image {
    /// Image `ic_logo`.
    static let ic_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logo")
    /// Image `ic_pointer`.
    static let ic_pointer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pointer")
    /// Image `ic_ride`.
    static let ic_ride = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_ride")
    /// Image `ic_taxi`.
    static let ic_taxi = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_taxi")
    
    /// `UIImage(named: "ic_logo", bundle: ..., traitCollection: ...)`
    static func ic_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_pointer", bundle: ..., traitCollection: ...)`
    static func ic_pointer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pointer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_ride", bundle: ..., traitCollection: ...)`
    static func ic_ride(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_ride, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_taxi", bundle: ..., traitCollection: ...)`
    static func ic_taxi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_taxi, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `TaxiItemCell`.
    static let taxiItemCell = _R.nib._TaxiItemCell()
    
    /// `UINib(name: "TaxiItemCell", in: bundle)`
    static func taxiItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.taxiItemCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `TaxiItemCell`.
    static let taxiItemCell: Rswift.ReuseIdentifier<TaxiItemCell> = Rswift.ReuseIdentifier(identifier: "TaxiItemCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizeble` struct is generated, and contains static references to 3 localization keys.
    struct localizeble {
      /// Value: Find your car
      static let carsList_FindYourCar = Rswift.StringResource(key: "CarsList_FindYourCar", tableName: "Localizeble", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Loading
      static let common_Loading = Rswift.StringResource(key: "Common_Loading", tableName: "Localizeble", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No data
      static let common_NoData = Rswift.StringResource(key: "Common_NoData", tableName: "Localizeble", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Find your car
      static func carsList_FindYourCar(_: Void = ()) -> String {
        return NSLocalizedString("CarsList_FindYourCar", tableName: "Localizeble", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Loading
      static func common_Loading(_: Void = ()) -> String {
        return NSLocalizedString("Common_Loading", tableName: "Localizeble", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: No data
      static func common_NoData(_: Void = ()) -> String {
        return NSLocalizedString("Common_NoData", tableName: "Localizeble", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _TaxiItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TaxiItemCell
      
      let bundle = R.hostingBundle
      let identifier = "TaxiItemCell"
      let name = "TaxiItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TaxiItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TaxiItemCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let carsListViewController = StoryboardViewControllerResource<CarsListViewController>(identifier: "CarsListViewController")
      let carsMapViewController = StoryboardViewControllerResource<CarsMapViewController>(identifier: "CarsMapViewController")
      let name = "Main"
      
      func carsListViewController(_: Void = ()) -> CarsListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: carsListViewController)
      }
      
      func carsMapViewController(_: Void = ()) -> CarsMapViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: carsMapViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.main().carsMapViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'carsMapViewController' could not be loaded from storyboard 'Main' as 'CarsMapViewController'.") }
        if _R.storyboard.main().carsListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'carsListViewController' could not be loaded from storyboard 'Main' as 'CarsListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
